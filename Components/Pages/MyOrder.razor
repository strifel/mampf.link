@page "/group/{GroupSlug}"
@implements IDisposable

@using System.Diagnostics
@using GroupOrder.Components.Layout
@using GroupOrder.Data
@using GroupOrder.Services.Common
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using GroupOrder.Components.MyOrder
@rendermode InteractiveServer

@layout AppLayout

@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IGroupService gs
@inject IAdminService adminService

<PageTitle>Mampf.Link @gs.Group?.GroupName</PageTitle>

<div class="row">
    @if (gs.Group != null)
    {
        @if (_personId != null)
        {
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <h1>Hi @gs.GetPersonByID(_personId.Value)?.Name</h1>
                <h2>Welcome to @gs.Group.GroupName</h2>
                <p>@gs.Group.Description</p>
                @if (gs.Group.MenuURL != null)
                {
                    <p>Menu is located at <a href="@gs.Group.MenuURL" target="_blank">@gs.Group.MenuURL</a></p>
                }
                @if (!IsOrderingClosed())
                {
                    <p>Ordering is closing at @gs.Group.ClosingTime!.Value.</p>
                }
                else
                {
                    <p><b>Ordering has already closed.</b></p>
                }
            </div>

            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                @if (showAllOrders)
                {
                    <h2>All orders:</h2>
                }
                else
                {
                    <h2>Your order:</h2>
                }
                <EditForm EditContext="editContext" OnValidSubmit="AddToOrder" FormName="order-form">
                    <table class="table">
                        <thead>
                        <tr>
                            @if (showAllOrders)
                            {
                                <th>
                                    Person
                                </th>
                            }
                            <th>
                                Food
                            </th>
                            @if (gs.Group.PaymentType != PaymentType.NO_PRICES)
                            {
                                <th>
                                    Price
                                </th>
                            }
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (!showAllOrders)
                        {
                            @foreach (Order order in gs.GetPersonByID(_personId.Value)!.Orders)
                            {
                                <tr>
                                    <td>
                                        @order.Food
                                    </td>
                                    @if (gs.Group.PaymentType != PaymentType.NO_PRICES)
                                    {
                                        <td>
                                            @order.GetPrice()€
                                        </td>
                                    }
                                    <td>
                                        <DeleteOrder Order="@order"/>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            @foreach (Order order in gs.Group.Orders)
                            {
                                <tr>
                                    <td>
                                        @order.Person.Name
                                    </td>
                                    <td>
                                        @order.Food
                                    </td>
                                    @if (gs.Group.PaymentType != PaymentType.NO_PRICES)
                                    {
                                        <td>
                                            @order.GetPrice()€
                                        </td>
                                    }
                                    <td>
                                        @if (order.Person == gs.GetPersonByID(_personId.Value))
                                        {
                                            <DeleteOrder Order="@order"/>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        @if (!IsOrderingClosed())
                        {
                            <tr>
                                @if (showAllOrders)
                                {
                                    <td>
                                        @gs.GetPersonByID(_personId.Value)?.Name
                                    </td>
                                }
                                <td>
                                    <InputText min-length="1" max-length="100" placeholder="Pizza Margherita" class="form-control" @bind-Value="OrderFood"/>
                                </td>
                                @if (gs.Group.PaymentType != PaymentType.NO_PRICES)
                                {
                                    <td>
                                        <InputNumber min="0" step="0.01" placeholder="10.00" class="form-control" @bind-Value="OrderPrice"/>
                                    </td>
                                }
                                <td>
                                    <button class="btn btn-primary" type="submit">Add</button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <ValidationMessage For="() => editContext!"/>
                </EditForm>
                <InputCheckbox @bind-Value="showAllOrders" id="showAllOrders" /><label style="padding-left: 5px" for="showAllOrders">Show orders of other people</label>
            </div>

            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                @if (GetPriceToPay() > 0)
                {
                    <h2>Pay here!</h2>
                    <p>
                        You still need to pay @Order.GetPrice(GetPriceToPay())€ to the group leader. <br/>
                        Please mark your Payment as Paid after you have paid the group leader.
                    </p>
                    @if (gs.Group.PaypalUsername != null)
                    {
                        <p>You can use the Paypal Button to generate a paypal.me link for the correct amount to pay back the group leader.</p>
                        <a class="btn btn-primary" style="margin-right: 2px" target="_blank" href="https://www.paypal.com/paypalme/@gs.Group.PaypalUsername/@Order.GetPrice(GetPriceToPay())">Send money via Paypal</a>
                    }
                    <br/><br/>
                    <p>Afterwards: mark as paid with <InputSelect @bind-Value="SelectedPaymentMethod">
                        <option value="@PaymentMethod.Other" hidden>Select here</option>
                        <option value="@PaymentMethod.Paypal">Paypal</option>
                        <option value="@PaymentMethod.WireTransfer">wire transfer</option>
                        <option value="@PaymentMethod.Cash">cash</option>
                        <option value="@PaymentMethod.Other">other</option>
                    </InputSelect>
                    @if (SelectedPaymentMethod != null)
                    {
                        <button style="margin-left: 5px" class="btn btn-secondary" @onclick="Paid">save</button>
                    }
                    </p> 
                    
                }
                else if (GetPriceToPay() < 0)
                {
                    <h2>Payments</h2>
                    <p>
                        You seem to have overpaid @Order.GetPrice(GetPriceToPay()*-1)€.
                        Please contact the group leader.
                    </p>
                }
                else if (gs.Group.PaymentType == PaymentType.NO_NEED_TO_PAY)
                {
                    <h2>Group leader pays!</h2>
                    <p>You are good to go!</p>
                }
            </div>
        }
        @if (_personId == null && NoPerson)
        {
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <h1>You are new to the group!</h1>
                <h2>Enter your name to join @gs.Group.GroupName</h2>
                <p>@gs.Group.Description</p>
                @if (gs.Group.MenuURL != null)
                {
                    <p>Menu is located at <a href="@gs.Group.MenuURL" target="_blank">@gs.Group.MenuURL</a></p>
                }
                @if (!IsOrderingClosed())
                {
                    <p>Ordering is closing at @gs.Group.ClosingTime!.Value.</p>
                }
                else
                {
                    <p><b>Ordering has already closed.</b></p>
                }

                <div class="form-floating" style="max-width: 300px;display: inline-block">
                    <InputText
                        id="group_name"
                        placeholder=" "
                        class="form-control"
                        @bind-Value="NewName"/>
                    <label for="group_name">Your name:</label>
                </div>
                <button class="btn btn-primary" @onclick="CreatePerson" style="height: 58px">Join Group!</button>
            </div>
        }
    }
</div>

@code {

    private int? _personId;
    // Name of the person that is getting created
    private String? NewName { get; set; }

    // Infos of food that is getting created
    private String? OrderFood { get; set; }
    private Decimal? OrderPrice { get; set; }
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private bool showAllOrders = false;
    
    private bool NoPerson { get; set; } = false;

    private PaymentMethod? SelectedPaymentMethod;
    
    [Parameter]
    public string? GroupSlug { get; set; }
    
    protected override void OnInitialized()
    {
        editContext = new(this);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
        gs.OnGroupReload += GsOnOnGroupReload;
        base.OnInitialized();
    }
    
    private void GsOnOnGroupReload(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // find local person
        // this needs to be done here because it uses javascript interop
        if (gs.Group != null && _personId == null)
        {
            var personId = await ProtectedLocalStorage.GetAsync<int>("grouporder_person_" + gs.Group.Id);
            if (personId.Success)
            {
                _personId = personId.Value;
            }
            else
            {
                NoPerson = true;
            }
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void Paid()
    {
        if (_personId == null) return;
        if (SelectedPaymentMethod == null) return;
        int paid = GetPriceToPay();
        gs.ReloadRestriction.WaitOne();
        Person? person = gs.GetPersonByID(_personId.Value);
        if (person == null)
        {
            gs.ReloadRestriction.Release();
            return;
        }

        Payment payment = new Payment();
        payment.Amount = paid;
        payment.Person = person;
        payment.PaymentConfirmed = false;
        payment.PaymentMethod = SelectedPaymentMethod ?? PaymentMethod.Other;

        gs.AddPayment(payment, person);

        await gs.Save();
        gs.ReloadRestriction.Release();
        SelectedPaymentMethod = null;
    }

    private int GetPriceToPay()
    {
        if (_personId == null) return 0;
        if (gs.Group == null) return 0;
        if (gs.Group.PaymentType != PaymentType.PAY) return 0;
        Person? person = gs.GetPersonByID(_personId.Value);
        if (person == null)
        {
            return 0;
        }
        return person.GetPriceToPay();
    }

    private void CreatePerson()
    {
        if (gs.Group == null) return;
        if (NewName == null) return;
        if (NewName.Length is > 100 or 0) return;
        
        gs.ReloadRestriction.WaitOne();
        
        Person person = new Person
        {
            Group = gs.Group,
            Name = NewName
        };

        gs.AddPerson(person);
        gs.Save();

        _personId = person.Id;

        gs.ReloadRestriction.Release();

        ProtectedLocalStorage.SetAsync("grouporder_person_" + gs.Group.Id, person.Id);
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (string.IsNullOrEmpty(OrderFood) || OrderFood.Length > 100)
        {
            messageStore?.Add(() => editContext!, "You must enter a Food Choice between 1 and 100 chars.");
        }

        if (gs.Group is null || gs.Group.PaymentType != PaymentType.NO_PRICES)
        {
            if (OrderPrice == null | OrderPrice < 0)
            {
                messageStore?.Add(() => editContext!, "Price must be greater than 0.");
            }

            if (OrderPrice is > 2000)
            {
                // We produce an overflow if its bigger than 21474836€
                // We also produce overflows if the sum of the total order is bigger than 21474836€
                messageStore?.Add(() => editContext!, "Price must be smaller or equal to 2000€.");
            }
        }

        if (IsOrderingClosed())
        {
            messageStore?.Add(() => editContext!, "The ordering period has already closed.");
        }
    }

    private async void AddToOrder()
    {
        if (_personId == null) return;
        gs.ReloadRestriction.WaitOne();
        Person? person = gs.GetPersonByID(_personId.Value);
        if (person == null)
        {
            gs.ReloadRestriction.Release();
            return;
        }
        
        Order newOrder = new()
        {
            Food = OrderFood!,
            PaymentStatus = PaymentStatus.Unpaid
        };
        
        if (gs.Group!.PaymentType != PaymentType.NO_PRICES)
        {
            newOrder.Price = (int)(OrderPrice! * 100);
        }

        if (adminService.IsAdmin())
        {
            Payment payment = new Payment();
            payment.PaymentMethod = PaymentMethod.NoPayment;
            payment.Amount = newOrder.Price;
            payment.Person = person;
            payment.PaymentNote = "Auto added due to group leader order";
            payment.PaymentConfirmed = false;
            gs.AddPayment(payment, person);
        }
        
        
        gs.AddOrder(newOrder, person);
        await gs.Save();
        await gs.ReloadGroup();

        gs.ReloadRestriction.Release();
        
        ResetPendingOrder();
        StateHasChanged();
    }

    private void ResetPendingOrder()
    {
        OrderPrice = null;
        OrderFood = null;
        editContext!.OnValidationRequested -= HandleValidationRequested;
        editContext = new(this);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
        gs.OnGroupReload -= GsOnOnGroupReload;
    }

    private bool IsOrderingClosed()
    {
        return DateTime.Now > gs.Group!.ClosingTime;
    }
    
}