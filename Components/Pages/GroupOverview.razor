@page "/group/{GroupSlug}/overview"
@implements IDisposable

@using GroupOrder.Components.Layout
@using GroupOrder.Data
@using GroupOrder.Services.Common
@using Microsoft.EntityFrameworkCore
@using GroupOrder.Components.Error
@rendermode InteractiveServer

@layout AppLayout

@inject IDbContextFactory<GroupContext> DbFactory
@inject NavigationManager nm
@inject IAdminService adminService
@inject IGroupService gs

<PageTitle>Mampf.Link @gs.Group?.GroupName</PageTitle>

@if (gs.Group != null && adminService.IsAdmin())
{
    <h1>Group Leader Overview: @gs.Group?.GroupName</h1>
    <p>Link to Group: <a href="@nm.BaseUri.ToLower()group/@gs.Group!.GroupSlug">@nm.BaseUri.ToLower()group/@gs.Group!.GroupSlug</a></p>
    
    <p>@gs.Group?.Description</p>

    <table class="table">
        <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Food
            </th>
            <th>
                Price
            </th>
            <th>
                Actions
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (Order order in gs.Group!.Orders)
        {
        <tr>
            <td>
                @order.Person.Name
            </td>
            <td>
                @order.Food
            </td>
            <td>
                @order.GetPrice()€
            </td>
            <td>
                @if (adminService.IsAdmin())
                {
                    <span class="btn" title="Delete order" style="cursor: pointer" @onclick="() => Delete(order)">🗑</span>
                }
            </td>
        </tr>
        }
        </tbody>
    </table>
}
else
{
    <FourZeroThreeError />
}

@code {
    [Parameter]
    public string? GroupSlug { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        nm.LocationChanged += HandleLocationChanged;
        gs.OnGroupReload += HandleGroupChanged;
    }

    void HandleLocationChanged(object? sender, LocationChangedEventArgs? e)
    {
        StateHasChanged();
    }
    
    private void HandleGroupChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }
    
    private void Delete(Order order)
    {
        gs.ReloadRestriction.WaitOne();
        gs.DeleteOrder(order);
        gs.Save();
        gs.ReloadRestriction.Release();
    }
    
    public void Dispose()
    {
        nm.LocationChanged -= HandleLocationChanged;
        gs.OnGroupReload -= HandleGroupChanged;
    }
}
