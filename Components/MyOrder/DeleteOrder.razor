@using GroupOrder.Data
@using GroupOrder.Services.Common
@inject IGroupService gs

@if (CanEdit())
{
    <a style="padding: 0;" title="Delete order" @onclick="Delete">
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
        </svg>
    </a>
}

@code {
    [Parameter]
    public Order? Order { get; set; }
    
    /**
     * This component is purely for user view and therefore allows
     * no admin override
     */
    private bool CanEdit()
    {
        if (gs.Group == null) return false;
        if (Order == null) return false;
        switch (gs.Group.EditingRule)
        {
            case EditingRule.AllowBeforeDeadline:
                return !IsOrderingClosed();
            case EditingRule.AllowBeforeCartAndDeadline:
                return !IsOrderingClosed() && Order.AddedToCart == false;
            case EditingRule.AllowBeforeCartAndPaymentAndDeadline:
                return !IsOrderingClosed() &&
                       Order.AddedToCart == false &&
                       Order.PaymentStatus != PaymentStatus.PaymentPending &&
                       Order.PaymentStatus != PaymentStatus.Paid;
            case EditingRule.AskEverytime:
                return false; //TODO
            case EditingRule.NeverAllow:
                return false;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
    private bool IsOrderingClosed()
    {
        return DateTime.Now > gs.Group!.ClosingTime;
    }

    private void Delete()
    {
        if (CanEdit() && Order != null)
        {
            gs.ReloadRestriction.WaitOne();
            gs.DeleteOrder(Order);
            gs.Save();
            gs.ReloadRestriction.Release();
        }
    }
}