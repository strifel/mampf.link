@page "/group/{GroupSlug}/finance"
@implements IDisposable

@using GroupOrder.Components.Layout
@using GroupOrder.Data
@using GroupOrder.Services.Common
@using GroupOrder.Components.Error
@using GroupOrder.Migrations
@using Order=GroupOrder.Data.Order

@layout AppLayout

@inject NavigationManager NavManager
@inject IGroupService GroupService
@inject IAdminService AdminService

<PageTitle>Mampf.Link @GroupService.CurrentGroup?.GroupName Finances</PageTitle>

@if (GroupService.CurrentGroup != null && AdminService.IsAdmin())
{
    <h1>Finance Overview: @GroupService.CurrentGroup?.GroupName</h1>

    <InputCheckbox @bind-Value="HideConfirmedPaid" id="HideConfirmedPaid"/>
    <label style="padding-left: 5px" for="HideConfirmedPaid">Show only payments that require
        attention</label>

    @foreach (Person person in GetPersons())
    {
        <div class="card" style="width: 100%; margin-bottom: 1rem">
            <div class="card-header">
                @person.Name (@Order.GetPrice(person.Orders.Sum(o => o.Price) ?? 0)€)
                @if (person.Payments.Sum(p => ((p.PaymentConfirmed ?? false) ? 0 : 1)) > 0)
                {
                    <span style="color: yellow"> (Payments unconfirmed)</span>
                }
                @if (person.GetPriceToPay() > 0)
                {
                    <span
                        style="color: red"> (Still owes @Order.GetPrice(person.GetPriceToPay())€)</span>
                    <a class="float-end" href="javascript:" @onclick="() => Paid(person)">Paid
                        up</a>
                }
                @if (person.GetPriceToPay(requireConfirmed: true) < 0)
                {
                    <span
                        style="color: orange"> (Overpaid @Order.GetPrice(person.GetPriceToPay())€)</span>
                    <a class="float-end" href="javascript:" @onclick="() => PaidBack(person)">I paid
                        back</a>
                }

            </div>
            <ul class="list-group list-group-flush">
                @foreach (Payment payment in person.Payments)
                {
                    <li class="list-group-item @((payment.PaymentConfirmed ?? false) ? "" : "payment-unconfirmed")">
                        @Order.GetPrice(payment.Amount ?? 0)€ paid with @payment.PaymentMethod
                        @if (payment.PaymentNote != null)
                        {
                            <span> (Custom note: @payment.PaymentNote)</span>
                        }
                        @if (!(payment.PaymentConfirmed ?? true))
                        {
                            <a @onclick="() => { payment.PaymentConfirmed = true; GroupService.Save(); }"
                               class="float-end" href="javascript:">Confirm</a>
                        }
                        else
                        {
                            <a @onclick="() => { payment.PaymentConfirmed = false; GroupService.Save(); }"
                               class="float-end" href="javascript:">Un-Confirm</a>
                        }
                        <a style="margin-right: 3px;"
                           @onclick="() => { GroupService.DeletePayment(payment); GroupService.Save(); }"
                           class="float-end" href="javascript:">Delete</a>
                    </li>
                }
            </ul>
        </div>
    }
}
else
{
    <FourZeroThreeError/>
}

<style>
    .payment-unconfirmed {
        color: yellow;
    }
</style>
