@page "/group/{GroupSlug}/add"
@implements IDisposable

@using GroupOrder.Components.Layout
@using GroupOrder.Data
@using GroupOrder.Services.Common
@using Microsoft.EntityFrameworkCore
@using GroupOrder.Components.Error
@rendermode InteractiveServer

@layout AppLayout

@inject IGroupService gs
@inject IAdminService adminService
@inject IDbContextFactory<GroupContext> DbFactory


<PageTitle>Mampf.Link Add</PageTitle>

<h1>Add Food manually as an group leader</h1>
<p>Only use if it is really required as it is quite legacy and could produce bugs.</p>

@if (adminService.IsAdmin())
{
    @if (!Saved)
    {
        <EditForm EditContext="editContext" OnValidSubmit="Submit" FormName="group-add-form">
            <AntiforgeryToken/>
            <div class="form-group">
                <label>
                    Name:
                    <InputText class="form-control" @bind-Value="Name"/>
                </label>
            </div>
            <div class="form-group">
                <label>
                    Food:
                    <InputText class="form-control" @bind-Value="Order!.Food"/>
                </label>
            </div>
            <div class="form-group">
                <label>
                    Price (Euro):
                    <InputNumber step="0.01" placeholder="10.00" class="form-control" @bind-Value="Price"/>
                </label>
            </div><br/>
            <div>
                <ValidationMessage For="() => Order!"/>
            </div>
            <button class="btn btn-primary" type="submit">Submit</button>
        </EditForm>
    }
    @if (Saved)
    {
        <h3>Erfolgreich eingetragen.</h3>
        <button @onclick="reset" class="btn btn-secondary">Noch eins eintragen?</button>
    }
}
else
{
    <FourZeroThreeError />
}

@code {
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    
    private Order? Order { get; set; }
    private Decimal? Price { get; set; }
    private String? Name { get; set; }

    private bool Saved { get; set; } = false;
    
    [Parameter]
    public string? GroupSlug { get; set; }

    protected override void OnInitialized()
    {
        Order ??= new();
        editContext = new(Order);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
    }

    private void reset()
    {
        Order = new();
        Price = null;
        Name = null;
        editContext = new(Order);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);
        Saved = false;
    }
    
    
    private async void Submit()
    {
        Order!.Price = (int)(Price! * 100);
        
        using var context = DbFactory.CreateDbContext();
        
        Group? group = await context.Groups
            .SingleOrDefaultAsync(
                c => c.GroupSlug == GroupSlug);

        if (group is null)
        {
            return;
        }

        Person? person = await context.Persons.FirstOrDefaultAsync(p => p.Group == group && p.Name == Name);

        if (person is null)
        {
            person = new Person();
            person.Group = group;
            person.Name = Name;
            context.Add(person);
        }

        Order!.AddedToCart = false;
        Order!.Group = group;
        Order!.Person = person;
        context.Add(Order!);
        context.SaveChanges();
        Saved = true;
        await gs.ReloadGroup();
    }
    
    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (Name == null || Name!.Length == 0 || Name!.Length > 100)
        {
            messageStore?.Add(() => Order!, "You must enter a Name between 1 and 100 chars.");
        }
        
        if (Order!.Food == null || Order!.Food!.Length == 0 || Order!.Food!.Length > 100)
        {
            messageStore?.Add(() => Order, "You must enter a Food Choice between 1 and 100 chars.");
        }
        
        if (Price == null | Price < 0)
        {
            messageStore?.Add(() => Order, "Price must be greater than 0.");
        }
    }
    
    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}