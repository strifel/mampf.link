@page "/group/{GroupSlug}/cart"

@using GroupOrder.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@inject IDbContextFactory<GroupContext> DbFactory
@inject NavigationManager nm

<PageTitle>Mampf.Link @Group?.GroupName Cart-Helper</PageTitle>

@if (Group != null)
{
    <h1>Left to add to Cart: @Group?.GroupName</h1>


    <table class="table">
        <thead>
        <tr>
            <th>
                Food
            </th>
            @if (Group.PaymentType != PaymentType.NO_PRICES)
            {
                <th>
                    Price
                </th>
            }
            <th>
                Mark as Added
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (Order order in Group!.Orders)
        {
            @if (order.AddedToCart == true) { continue; }
            <tr>
                <td>
                    @order.Food
                </td>
                @if (Group.PaymentType != PaymentType.NO_PRICES)
                {
                    <td>
                        @order.GetPrice()€
                        @if (order.PaymentStatus == PaymentStatus.Paid)
                        {
                            <span style="color: green"> (Paid)</span>
                        }
                    </td>
                }
                <td>
                    <button class="primary" @onclick="() => SetAdded(order)">Added</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <br>
    <br>
    @if (Group.PaymentType != PaymentType.NO_PRICES)
    {
        <p>You should have added @Order.GetPrice(CalculateAddedSum())€ to your cart.<br>
            The total will be @Order.GetPrice(CalculateTotalSum())€.</p>
    }
}

@code {
    
    private Group? Group { get; set; }

    private bool Loading { get; set; } = false;
    private bool NotFound { get; set; } = false;
    
    [Parameter]
    public string? GroupSlug { get; set; }
    
    private string? AdminCode { get; set; }

    protected override Task OnInitializedAsync()
    {
        _context = DbFactory.CreateDbContext();
        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGroupAsync();
        await base.OnParametersSetAsync();
    }

    GroupContext? _context;
    
    // Loads the contact.
    private async Task LoadGroupAsync()
    {
        if (nm.Uri.Contains("?") && QueryHelpers.ParseQuery(nm.Uri.Split("?")[1]).TryGetValue("admin", out var code))
        {
            AdminCode = code;
        }
        else
        {
            NotFound = true;
            return;
        }
        
        if (Loading)
        {
            return; //avoid concurrent requests.
        }

        Group = null;
        Loading = true;
        
        if (_context!.Groups is not null)
        {
            Group = await _context!.Groups
                .Include(group => group.Orders)
                .SingleOrDefaultAsync(
                    c => c.GroupSlug == GroupSlug && c.AdminCode == AdminCode);

            if (Group is null)
            {
                NotFound = true;
            }
            
            // As we have already loaded all orders we sum them up in code, not in an query
        }

        Loading = false;
    }

    private int CalculateTotalSum()
    {
        if (Group == null) return 0;
        return Group!.Orders.Sum(o => o.Price) ?? 0;
    }
    
    private int CalculateAddedSum()
    {
        if (Group == null) return 0;
        return Group!.Orders.Sum(o => o.AddedToCart ?? false ? o.Price : 0) ?? 0;
    }

    private async void SetAdded(Order order) {
        if (Group == null) return;
        if (Group.AdminCode != AdminCode) return; // this theoretically should not happen
        order.AddedToCart = true;
        await _context!.SaveChangesAsync();
        StateHasChanged();
    }
    
}
