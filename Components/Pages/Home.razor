@page "/"
@implements IDisposable

@using System.Security.Cryptography
@using System.Text.RegularExpressions
@using GroupOrder.Data
@using Microsoft.EntityFrameworkCore
@using Group = GroupOrder.Data.Group

@rendermode InteractiveServer

@inject IDbContextFactory<GroupContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Mampf.Link</PageTitle>

<div class="container">
    <EditForm EditContext="_editContext" OnValidSubmit="Submit" FormName="group-create-form">
        <AntiforgeryToken/>
        <div class="row">
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <h3 class="h3 fw-normal">Welcome to mampf.link</h3>
                <p>Create a new Group here or use a link to join an existing one.</p>
            </div>
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <div class="form-floating">
                    <InputText
                        id="group_name"
                        placeholder=" "
                        class="form-control"
                        @bind-Value="Model!.GroupName"/>
                    <label for="group_name">Group Name:</label>
                </div>
            </div>
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <div class="form-floating">
                    <InputTextArea
                        placeholder=" "
                        id="group_description"
                        class="form-control"
                        @bind-Value="Model!.Description"
                        style="height: 100px"
                    />
                    <label for="group_description">Description (optional):</label>
                </div>
            </div>
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <div class="form-floating">
                    <InputText
                        id="menu_url"
                        placeholder=" "
                        class="form-control"
                        @bind-Value="Model!.MenuURL"/>
                    <label for="group_name">Menu URL (optional):</label>
                </div>
            </div>
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <div class="form-floating">
                    <InputDate
                        id="closingTime"
                        class="form-control"
                        @bind-Value="Model!.ClosingTime"
                        type="@InputDateType.DateTimeLocal"
                    />
                    <label for="group_description">Closing Time:</label>
                </div>
            </div>
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <div class="form-floating">
                    <InputSelect id="payment_type" class="form-select form-control" @bind-Value="@Model.PaymentType">
                        <option value="@PaymentType.PAY" default>Enabled</option>
                        <option value="@PaymentType.NO_NEED_TO_PAY">Host pays everything</option>
                        <option value="@PaymentType.NO_PRICES">Disabled</option>
                    </InputSelect>
                    <label for="payment_type">Payments:</label>
                </div>
            </div>
            @if (Model!.PaymentType == PaymentType.PAY)
            {
                <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                    <div class="form-floating">
                        <InputText
                            placeholder=" "
                            id="paypal_username"
                            class="form-control"
                            @bind-Value="Model!.PaypalUsername"/>
                        <label for="paypal_username">Your PayPal Username (optional):</label>
                    </div>
                </div>
            }
            <div class="col-sm-12 col-lg-5 offset-lg-3 mb-3">
                <div>
                    <ValidationMessage For="() => Model!"/>
                </div>
                <button class="btn btn-primary" type="submit">Create Group</button>
            </div>
        </div>
    </EditForm>
    <div class="row">
        <div class="d-flex justify-content-center">
            <a href="https://github.com/strifel/mampf.link">Code on Github</a>
        </div>
    </div>

</div>

@code {
    [SupplyParameterFromForm] public Group? Model { get; set; }
    private ValidationMessageStore? _messageStore;

    private EditContext? _editContext;

    protected override void OnInitialized()
    {
        Model ??= new()
        {
            ClosingTime = DateTime.Now + TimeSpan.FromMinutes(30)
        };
        
        _editContext = new(Model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);
    }

    private void Submit()
    {
        using var context = DbFactory.CreateDbContext();
        Model!.AdminCode = RandomNumberGenerator.GetHexString(10);
        Model!.GroupSlug = RandomNumberGenerator.GetHexString(10);
        context.Add(Model);
        context.SaveChanges();

        NavigationManager.NavigateTo($"/group/{Model!.GroupSlug}/overview?admin={Model!.AdminCode}");
    }

    private void HandleValidationRequested(object? sender,
        ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        if (Model!.GroupName == null || Model!.GroupName!.Length == 0 || Model!.GroupName!.Length > 100)
        {
            _messageStore?.Add(() => Model!, "You must enter a Name between 1 and 100 chars.");
        }

        if (Model!.Description != null && Model!.Description!.Length > 500)
        {
            _messageStore?.Add(() => Model!, "Description should be maximum 500 characters.");
        }

        if (Model!.PaypalUsername != null && (Model!.PaypalUsername!.Length > 20 || !new Regex("^[a-zA-Z0-9]+$").IsMatch(Model!.PaypalUsername!)))
        {
            _messageStore?.Add(() => Model!, "Please enter a valid paypal username.");
        }

        if (Model!.ClosingTime == null || Model!.ClosingTime < DateTime.Now)
        {
            _messageStore?.Add(() => Model!, "Please select an Closing Time in the future.");
        }

        if (Model!.MenuURL != null && !Uri.IsWellFormedUriString(Model!.MenuURL, UriKind.Absolute))
        {
            _messageStore?.Add(() => Model!, "Please enter no or a valid url.");
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

}
