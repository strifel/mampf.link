@page "/group/{GroupSlug}/overview"

@using GroupOrder.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

@inject IDbContextFactory<GroupContext> DbFactory
@inject NavigationManager nm

<PageTitle>Mampf.Link @Group?.GroupName</PageTitle>

@if (Group != null)
{
    <h1>Group Overview: @Group?.GroupName</h1>
    <p>Link to Group: <a href="@nm.BaseUri.ToLower()group/@Group!.GroupSlug">@nm.BaseUri.ToLower()group/@Group!.GroupSlug</a></p>
    
    <p>@Group?.Description</p>

    <table class="table">
        <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Food
            </th>
            <th>
                Price
            </th>
            <th>
                Actions
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (Order order in Group!.Orders)
        {
        <tr>
            <td>
                @order.Person.Name
            </td>
            <td>
                @order.Food
            </td>
            <td>
                @order.GetPrice()€
            </td>
            <td>
                @if (!string.IsNullOrEmpty(Group.PaypalUsername))
                {
                    <span class="btn" title="Send money with Paypal" style="cursor: pointer" data-bs-toggle="modal" data-bs-target="#paidModal" onclick="window.open('https://www.paypal.com/paypalme/@Group.PaypalUsername/@order.GetPrice()')" @onmouseenter="() => { showPaidModal = order; }">💳</span>
                }
                @if (AdminCode != null && AdminCode == Group.AdminCode)
                {
                    <span class="btn" title="Delete order" style="cursor: pointer" @onclick="() => Delete(order.Id)">🗑</span>
                }
            </td>
        </tr>
        }
        </tbody>
    </table>
}

@if (showPaidModal != null)
{
    <div id="paidModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Already paid?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                    <div class="modal-body">
                        <p>Have you sent @showPaidModal.GetPrice()€?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="() => { Paid(showPaidModal.Id); showPaidModal = null; }">Yes</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => showPaidModal = null">Not yet</button>
                    </div>
            </div>
        </div>
    </div>
}

@code {
    
    private Group? Group { get; set; }

    private bool Loading { get; set; } = false;
    private bool NotFound { get; set; } = false;

    private String? AdminCode;

    private Order? showPaidModal;
    
    [Parameter]
    public string? GroupSlug { get; set; }

    public Order? Order { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await LoadGroupAsync();
        await base.OnParametersSetAsync();
        nm.LocationChanged += HandleLocationChanged;
    }

    void HandleLocationChanged(object? sender, LocationChangedEventArgs? e)
    {
        if (nm.Uri.Contains("?") && QueryHelpers.ParseQuery(nm.Uri.Split("?")[1]).TryGetValue("admin", out var code))
        {
            AdminCode = code;
        }
        else
        {
            AdminCode = null;
        }
        StateHasChanged();
    }

    // Loads the contact.
    private async Task LoadGroupAsync()
    {
        HandleLocationChanged(null, null);
        
        if (Loading)
        {
            return; //avoid concurrent requests.
        }

        Group = null;
        Loading = true;

        using var context = DbFactory.CreateDbContext();

        if (context.Groups is not null)
        {
            Group = await context.Groups
                .Include(group => group.Orders)
                .ThenInclude(order => order.Person)
                .SingleOrDefaultAsync(
                    c => c.GroupSlug == GroupSlug);

            if (Group is null)
            {
                NotFound = true;
            }
        }

        Loading = false;
    }

    private void Paid(int orderId)
    {
        using var context = DbFactory.CreateDbContext();
        Order order = context.Orders.Find(orderId)!;
        if (order.PaymentStatus == PaymentStatus.Unpaid)
        {
            order.PaymentStatus = PaymentStatus.PaymentPending;
            context.SaveChanges();
        }
    }
    
    private void Delete(int orderId)
    {
        using var context = DbFactory.CreateDbContext();
        Order order = context.Orders.Find(orderId)!;
        context.Orders.Remove(order);
        context.SaveChanges();
        var task = LoadGroupAsync();
        task.ContinueWith(_ => { }, TaskContinuationOptions.OnlyOnFaulted);
    }
    
}
